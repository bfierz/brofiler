#include "Common.h"
#include "ProfilerServer.h"

#include "Socket.h"
#include "Message.h"
#include <memory>

#pragma comment( lib, "ws2_32.lib" )

namespace Profiler
{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static const short DEFAULT_PORT = 31313;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Server::Server(short port) : socket(std::make_unique<Socket>())
{
	running.store(true);
	socket->Bind(port, 8);
	socket->Listen();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Server::Update()
{
	CRITICAL_SECTION(lock);

	InitConnection();

	int length = -1;
	while ( (length = socket->Receive( buffer, BIFFER_SIZE ) ) > 0 )
	{
		networkStream.Append(buffer, length);
	}

	while (IMessage *message = IMessage::Create(networkStream))
	{
		message->Apply();
		delete message;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Server::Send(DataResponse::Type type, OutputDataStream& stream)
{
	CRITICAL_SECTION(lock);

	std::string data = stream.GetData();

	DataResponse response(type, (uint32_t)data.size());
	socket->Send((char*)&response, sizeof(response));
	socket->Send(data.c_str(), data.size());
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Server::InitConnection()
{
	if (!acceptThread) {
		acceptThread = std::make_unique<std::thread>([this](){AsyncAccept();});
		return true;
	}
	return false;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Server::~Server()
{
	running.store(false, std::memory_order_release);
	socket->Close();
	acceptThread->join();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Server & Server::Get()
{
	static Server instance(DEFAULT_PORT);
	return instance;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Server::AsyncAccept()
{
	while (running.load(std::memory_order_acquire)) {
		socket->Accept();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
