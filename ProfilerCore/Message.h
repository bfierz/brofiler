#pragma once
#include "Common.h"
#include "Serialization.h"

namespace Profiler
{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static const uint32_t NETWORK_PROTOCOL_VERSION = 5;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DataResponse
{
	enum Type
	{
		FrameDescriptionBoard = 0, // DescriptionBoard for Instrumental Frames
		EventFrame = 1,            // Instrumental Data
		SamplingFrame = 2,         // Sampling Data
		NullFrame = 3,             // Last Fame Mark
		ReportProgress = 4,        // Report Current Progress
		Handshake = 5,             // Handshake Response
	};

	uint32_t version;
	uint32_t size;
	Type type;

	DataResponse(Type t, uint32 s) : type(t), size(s), version(NETWORK_PROTOCOL_VERSION) {}
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OutputDataStream& operator << (OutputDataStream& os, const DataResponse& val);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class IMessage
{
public:
	enum Type
	{
		Start,
		Stop,
		TurnSampling,
		SetupHook,
		COUNT,
	};

	virtual void Apply() = 0;
	virtual ~IMessage() = default;

	static IMessage* Create( InputDataStream& str );
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<IMessage::Type MESSAGE_TYPE>
class Message : public IMessage
{
	enum { id = MESSAGE_TYPE };
public:
	static uint32_t GetMessageType() { return id; }
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct StartMessage : public Message<IMessage::Start>
{
	static IMessage* Create(InputDataStream&);
	virtual void Apply() override;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct StopMessage : public Message<IMessage::Stop>
{
	static IMessage* Create(InputDataStream&);
	virtual void Apply() override;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TurnSamplingMessage : public Message<IMessage::TurnSampling>
{
	int32_t index;
	uint8_t isSampling;

	static IMessage* Create(InputDataStream& stream);
	virtual void Apply() override;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SetupHookMessage : public Message<IMessage::SetupHook>
{
	uint64_t address;
	uint8_t  isHooked;

	static IMessage* Create(InputDataStream& stream);
	virtual void Apply() override;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}