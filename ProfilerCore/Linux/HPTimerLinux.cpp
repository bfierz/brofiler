#include "../HPTimer.h"
#include <time.h>
#include "../Thread.h"

namespace Profiler
{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int64_t GetTime()
{
	return clock();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int64_t GetFrequency()
{
	return CLOCKS_PER_SEC;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int64_t GetTimeMilliSeconds()
{
	timespec time;
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &time);
	return time.tv_sec * 1000 + time.tv_nsec / 1000000;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int64_t GetTimeMicroSeconds()
{
	timespec time;
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &time);
	return time.tv_sec * 1000000 + time.tv_nsec / 1000;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SpinSleep(uint32_t microSeconds)
{
	int64_t time = GetTimeMicroSeconds() + microSeconds;
	while(GetTimeMicroSeconds() < time)
	{
		std::this_thread::yield();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
